<?php

namespace Proxies\__CG__\CMS\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Route extends \CMS\Entity\Route implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'url', 'namespace', 'class', 'action'];
        }

        return ['__isInitialized__', 'id', 'url', 'namespace', 'class', 'action'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Route $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setNamespace($namespace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNamespace', [$namespace]);

        return parent::setNamespace($namespace);
    }

    /**
     * {@inheritDoc}
     */
    public function getNamespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNamespace', []);

        return parent::getNamespace();
    }

    /**
     * {@inheritDoc}
     */
    public function setClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClass', [$class]);

        return parent::setClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function getClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClass', []);

        return parent::getClass();
    }

    /**
     * {@inheritDoc}
     */
    public function setAction($action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAction', [$action]);

        return parent::setAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAction', []);

        return parent::getAction();
    }

    /**
     * {@inheritDoc}
     */
    public function serialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'serialize', []);

        return parent::serialize();
    }

    /**
     * {@inheritDoc}
     */
    public function unserialize($serialized)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unserialize', [$serialized]);

        return parent::unserialize($serialized);
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setPath($pattern)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPath', [$pattern]);

        return parent::setPath($pattern);
    }

    /**
     * {@inheritDoc}
     */
    public function getHost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHost', []);

        return parent::getHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setHost($pattern)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHost', [$pattern]);

        return parent::setHost($pattern);
    }

    /**
     * {@inheritDoc}
     */
    public function getSchemes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSchemes', []);

        return parent::getSchemes();
    }

    /**
     * {@inheritDoc}
     */
    public function setSchemes($schemes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSchemes', [$schemes]);

        return parent::setSchemes($schemes);
    }

    /**
     * {@inheritDoc}
     */
    public function hasScheme($scheme)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasScheme', [$scheme]);

        return parent::hasScheme($scheme);
    }

    /**
     * {@inheritDoc}
     */
    public function getMethods()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMethods', []);

        return parent::getMethods();
    }

    /**
     * {@inheritDoc}
     */
    public function setMethods($methods)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMethods', [$methods]);

        return parent::setMethods($methods);
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', []);

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function setOptions(array $options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOptions', [$options]);

        return parent::setOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function addOptions(array $options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOptions', [$options]);

        return parent::addOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function setOption($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption', [$name, $value]);

        return parent::setOption($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption', [$name]);

        return parent::getOption($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasOption($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOption', [$name]);

        return parent::hasOption($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaults()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaults', []);

        return parent::getDefaults();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaults(array $defaults)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaults', [$defaults]);

        return parent::setDefaults($defaults);
    }

    /**
     * {@inheritDoc}
     */
    public function addDefaults(array $defaults)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDefaults', [$defaults]);

        return parent::addDefaults($defaults);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefault($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefault', [$name]);

        return parent::getDefault($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasDefault($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDefault', [$name]);

        return parent::hasDefault($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setDefault($name, $default)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefault', [$name, $default]);

        return parent::setDefault($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequirements()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequirements', []);

        return parent::getRequirements();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequirements(array $requirements)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequirements', [$requirements]);

        return parent::setRequirements($requirements);
    }

    /**
     * {@inheritDoc}
     */
    public function addRequirements(array $requirements)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRequirements', [$requirements]);

        return parent::addRequirements($requirements);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequirement($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequirement', [$key]);

        return parent::getRequirement($key);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRequirement($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRequirement', [$key]);

        return parent::hasRequirement($key);
    }

    /**
     * {@inheritDoc}
     */
    public function setRequirement($key, $regex)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequirement', [$key, $regex]);

        return parent::setRequirement($key, $regex);
    }

    /**
     * {@inheritDoc}
     */
    public function getCondition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCondition', []);

        return parent::getCondition();
    }

    /**
     * {@inheritDoc}
     */
    public function setCondition($condition)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCondition', [$condition]);

        return parent::setCondition($condition);
    }

    /**
     * {@inheritDoc}
     */
    public function compile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'compile', []);

        return parent::compile();
    }

}
